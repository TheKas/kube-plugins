#!/bin/bash
# AUTHOR: Abhishek Tamrakar
# EMAIL: abhishek.tamrakar08@gmail.com
# VERSION: 0.0.1
# LICENSE: Copyright (C) 2018 Abhishek Tamrakar
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
#define variables
KUBE=${KUBECTL_PLUGINS_CALLER}
GET=$(which egrep)
AWK=$(which awk)
TMUX=$(which tmux)
SCRIPT=${0##*/}
NEWSESSION="${SCRIPT%%.*}$RANDOM"
# define functions
info()
{
  printf '\n%s: %s\n' "INFO" "$@"
}

warn()
{
  printf '\n%s: %s\n' "WARN" "$@"
}

fatal()
{
  printf '\n%s: %s\n' "ERROR" "$@"
  exit 1
}

check_commands()
{
  CMDS=(GET AWK TMUX KUBE)
  for cmd in ${CMDS[@]}
  do
     if [ x${!cmd} = x ]; then
       fatal "${!cmd} not found"
     fi
  done
}

destroy()
{
  $TMUX kill-server 2>/dev/null \
    && info "All sessions killed"
}

start_server()
{
  $TMUX start-server \
    || fatal "Failed to start tmux server"
}

check_session()
{
  if $TMUX has-session -t $THIS_SESSION 2>/dev/null;
  then
    is_session=0
  else
    is_session=1
  fi
}

create_session()
{
  $TMUX new-session -d -s $THIS_SESSION \
    || fatal "Cannot create session"
  $TMUX set-window-option -g automatic-rename off
}

start_split()
{
  check_session
  if [ $is_session -eq 1 ]; then
    # create session
    start_server
    create_session
  fi
  $TMUX selectp -t $n \; \
    splitw $COMMAND \; \
    select-layout tiled \;
}

run_kube_command()
{
  # only for use with plugin.
  NAMESPACE=${KUBECTL_PLUGINS_LOCAL_FLAG_NAMESPACE:-$KUBECTL_PLUGINS_CURRENT_NAMESPACE}
  THIS_SESSION=${KUBECTL_PLUGINS_LOCAL_FLAG_SESSION:-$NEWSESSION}
  SHOWERROR="${KUBECTL_PLUGINS_LOCAL_FLAG_ERROR}"
  n=0
  while IFS=' ' read -r POD CONTAINERS
  do
    $TMUX neww $COMMAND -n $POD 2>/dev/null
    for CONTAINER in ${CONTAINERS//,/ }
    do
      if [ x$POD = x -o x$CONTAINER = x ]; then
        # if any of the values is null, exit.
        warn "Looks like there is a problem getting pods data."
        break
      fi
      if [ ${SHOWERROR} -eq 1 ]; then
        # if enabled
        COMMAND="$KUBE logs -f $POD -c $CONTAINER -n $NAMESPACE | $GET '[Ee]rror|ERROR|[Ww]arn|WARN|[Ee]xception'"
      else
        #normal run
        COMMAND="$KUBE logs -f $POD -c $CONTAINER -n $NAMESPACE"
      fi

      start_split
    done
    $TMUX renamew $POD 2>/dev/null
    ((n+=1))
  done< <($KUBE get pods -n $NAMESPACE \
	--ignore-not-found=true \
	-o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].name| \
	sed '1d')
}

attach_sessions()
{
  $TMUX selectw -t $THIS_SESSION:1 \; \
  attach-session -t $THIS_SESSION\;
}
#
# interrupt or quit
trap destroy 2 3 15 EXIT
#
# run
check_commands
run_kube_command
attach_sessions
